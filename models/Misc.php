<?phpclass Misc extends Model{public function __construct(){	parent::__construct();}public function getCriteriaDetails($criteria_id,$dbg=PDBG){	$dbo=PDBO;		$q = " SELECT cri.*, cty.name AS crstype 		   FROM {$dbo}.`05_criteria` AS cri			   INNER JOIN {$dbo}.`05_crstypes` AS cty ON cri.crstype_id = cty.id		   WHERE cri.id = '$criteria_id' LIMIT 1; ";		// pr($q);	$sth = $this->db->querysoc($q);	return $sth->fetch();}	/* fxn */public function criteriaDetails($dbg=PDBG,$sort=false,$order='DESC'){	$dbo=PDBO;		$sort = ($sort)? $sort:"cri.crstype_id,cri.is_active";	$q = " SELECT cri.*,cty.name AS crstype,d.code AS department,cri.id AS criteria_id,cri.name AS criteria,cri.id AS id 			   FROM {$dbo}.`05_criteria` AS cri			   LEFT JOIN {$dbo}.`05_crstypes` AS cty ON cri.crstype_id = cty.id			   LEFT JOIN {$dbo}.`05_departments` AS d ON cri.department_id = d.id		   ORDER BY $sort $order,cri.name ";	// pr($q);	$sth = $this->db->querysoc($q);	return $sth->fetchAll();}	/* fxn */public function titlesDetails($dbg=PDBG){	$dbo=PDBO;		$q = "  SELECT 				t.*,t.id AS title_id,r.id AS role_id,r.name AS role 			FROM {$dbo}.`00_titles` AS t				INNER JOIN {$dbo}.`00_roles` AS r ON t.role_id = r.id			ORDER BY r.name,t.privilege_id ";	$sth = $this->db->querysoc($q);	return $sth->fetchAll();}	/* fxn */public function classroomsByLevel($level_id,$dbg=PDBG){	$dbo=PDBO;		$q = "  SELECT 				cr.*,sec.name AS section,sec.code AS section_code			FROM {$dbg}.05_classrooms AS cr 				INNER JOIN {$dbo}.`05_sections` AS sec ON cr.section_id = sec.id			WHERE 				cr.level_id = '$level_id' LIMIT 100; ";	$sth = $this->db->querysoc($q);	return $sth->fetchAll();}	/* fxn */public function subcourses($subject_id,$dbg=PDBG){		$dbo=PDBO;		$q = "SELECT crs.*,cr.name AS classroom 		FROM {$dbg}.05_courses AS crs 			LEFT JOIN {$dbg}.05_classrooms AS cr ON crs.crid = cr.id		WHERE crs.subject_id = '$subject_id'					ORDER BY crs.crid; ";	$sth = $this->db->querysoc($q);	return $sth->fetchAll(); 				}	/* fxn */public function acl($cond,$dbg=PDBG){	$dbo=PDBO;		$q = " SELECT a.*,m.name AS module,r.name AS role			FROM {$dbg}.acl AS a				INNER JOIN {$dbo}.modules AS m ON m.id = a.module_id				INNER JOIN {$dbo}.`00_roles`  AS r ON r.id = a.role_id			$cond ";	$sth = $this->db->querysoc($q);	return $sth->fetchAll();}	/* fxn */public function selectsAcl(){	$dbo=PDBO;		$q = " SELECT id,name FROM {$dbo}.modules ";	$sth = $this->db->querysoc($q);	$data['modules'] = $sth->fetchAll();	$q = " SELECT id,name FROM {$dbo}.`00_roles` ";	$sth = $this->db->querysoc($q);	$data['roles'] = $sth->fetchAll();	return $data;}	/* fxn */public function settings($dbg=PDBG){		$dbo=PDBO;		$q = "SELECT * FROM {$dbo}.`00_settings` ORDER BY label; ";	$sth = $this->db->querysoc($q);	return $sth->fetchAll(); 				}	/* fxn */public function getParentDetails($pcid,$dbg=PDBG){$dbo=PDBO;	$q = " SELECT c.id AS pcid,t.name AS title,ctp.ctp,c.*,cd.*	FROM {$dbo}.`00_contacts` AS c		LEFT JOIN {$dbo}.`00_titles` AS t ON c.title_id = t.id		LEFT JOIN {$dbo}.`00_ctp` AS ctp ON c.id = ctp.contact_id		LEFT JOIN {$dbo}.`88_contacts_departments` AS cd ON cd.contact_id = c.id	WHERE c.id = $pcid LIMIT 1; "; $sth = $this->db->querysoc($q);return $sth->fetch();}	/* fxn */public function getUsers($pcid,$dbg=PDBG){$dbo=PDBO;	$q = "SELECT c.id AS ucid,c.account,c.is_active,c.is_cleared,c.is_org,c.title_id,c.role_id,c.privilege_id,		t.name AS title,ctp.ctp,cd.*	FROM {$dbo}.`00_contacts` AS c		LEFT JOIN {$dbo}.`00_titles` AS t ON c.title_id = t.id		LEFT JOIN {$dbo}.`00_ctp` AS ctp ON c.id = ctp.contact_id		LEFT JOIN {$dbo}.`88_contacts_departments` AS cd ON cd.contact_id = c.id	WHERE c.parent_id = '$pcid' AND c.id <> $pcid ;"; $sth = $this->db->querysoc($q);return $sth->fetchAll();}	/* fxn */public function readContact($cid){$dbo=PDBO;	$q = "SELECT p.*,c.*,c.id AS cid	FROM {$dbo}.`00_contacts` AS c 		LEFT JOIN {$dbo}.`00_profiles` AS p ON p.contact_id = c.id	WHERE c.id = $cid LIMIT 1; ";$sth = $this->db->querysoc($q);$row = $sth->fetch();return $row;}	/* fxn */public function monthsQuarters($dbg=PDBG){	$dbo=PDBO;			$q = " SELECT * FROM {$dbo}.`05_months_quarters` ";	$sth = $this->db->querysoc($q);	return $sth->fetchAll();}public function searchLogs($params){		$dbo=PDBO;		$params = rally('stripslashes',$params);	$conditions='';	if (!empty($params['user']) && ($params['user'] != '0')){ $conditions .= " AND l.contact_id = '".$params['user']."' "; }			if (!empty($params['from'])){ $conditions .= " AND l.date >= '".$params['from']."' "; }			if (!empty($params['to'])){ $conditions .= " AND l.date <= '".$params['to']."' "; }			if (!empty($params['date'])){ $conditions .= " AND l.date = '".$params['date']."' "; }			return $conditions; 	}public function logs($page){	$dbo=PDBO;		$user = $_SESSION['user'];	/* conditions for advancedSearch */	$_SESSION['get'] 		= $_GET;		$condition = $this->searchLogs($_SESSION['get']);	/* sort */	$sort 	= isset($_GET['sort'])? $_GET['sort'] : 'l.date,l.time';	$order 	= $_SESSION['order'];	/*  PAGINATION */	$page     = isset($page) ? $page : 1;												/*  1 of 3 */	$numrows  = isset($_GET['numrows'])? $_GET['numrows'] : NUMLOGS;	$_SESSION['numrows'] = isset($numrows)? $numrows : NUMLOGS;	$perPage  = ($_SESSION['numrows'] < NUMLOGS)? $_SESSION['numrows']: NUMLOGS;		/*  2 of 3 */		$offset   = ($page - 1) * $perPage;													/*  3 of 3 */	$loggedin = loggedin();	$suid = isset($_SESSION['user']['ucid'])? $_SESSION['user']['ucid'] : '0';			$urid = isset($_SESSION['user']['role_id'])? $_SESSION['user']['role_id'] : '0';			$dbg=PDBG;		$q = " 			SELECT l.*,c.name AS user 			FROM {$dbg}.50_logs AS l				LEFT JOIN {$dbo}.`00_contacts` AS c ON l.contact_id = c.id				WHERE 1=1 ";	$q .= " $condition ORDER by $sort $order ";			$sth = $this->db->querysoc($q);		/* pageNav */	$totalCount = $this->countAll($q);				$pagination = new Pagination($page,$perPage,$totalCount);		$data['pages'] = $pagination->pageNav('mis','logs');		$data['num_pages']	= count($data['pages']);	$q .= " LIMIT $perPage OFFSET {$offset} ; ";			// echo "<br />q: $q <br />";									$sth = $this->db->querysoc($q);			$data['logs'] =  $sth->fetchAll();	$data['num_logs'] = (empty($data['logs']))? 0 : count($data['logs']);		return $data; }	/* fxn */public function deleteDuplicateLogs($dbg=PDBG){$dbo=PDBO;		$q = " DELETE a FROM {$dbg}.50_logs as a 	INNER JOIN (		SELECT id,date,time		FROM {$dbg}.50_logs 		GROUP BY time		HAVING count(time) > 1	) as b on a.id = b.id; ";$this->db->query($q);}	/* fxn */public function getCalendarDays($year=NULL){$dbo=PDBO;	$year  = isset($year)? $year:$_SESSION['sy'];$months = array();for($m=1;$m<13;$m++){	$m = ($m<10)? '0'.$m:$m;	$months[] = $m;}$thirtys 	= array('04','06','09','11');$feb		= array('02');/*sy is from "jun-01-year" to "may-30-yrend" */$days = array();foreach($months AS $month){	$yr = ($month<$_SESSION['settings']['month_start'])? $year+1:$year;	if(in_array($month,$feb)){		for($i=1;$i<30;$i++){			$i = ($i<10)? '0'.$i:$i;			$days[] = $yr.'-'.$month.'-'.$i;		}			} elseif(in_array($month,$thirtys)){		for($i=1;$i<31;$i++){			$i = ($i<10)? '0'.$i:$i;			$days[] = $yr.'-'.$month.'-'.$i;		}				} else {		for($i=1;$i<32;$i++){			$i = ($i<10)? '0'.$i:$i;			$days[] = $yr.'-'.$month.'-'.$i;		}					}}return $days;}	/* fxn */public function getCalendarDaysDB($dbg=PDBG){	$dbo=PDBO;		$q	  = " SELECT date FROM {$dbg}.05_calendar; ";	$sth  = $this->db->querysoc($q);	$rows = $sth->fetchAll(); 	return buildArray($rows,'date');}	/* fxn */public function cleanCalendar($dbg,$caldays,$dbdays){	$dbo=PDBO;		$q = "";	foreach($dbdays AS $b){		if(!in_array($b,$caldays)){			$q .= " DELETE FROM {$dbg}.05_calendar WHERE `date` = '$b' LIMIT 1; ";		}	}	$this->db->query($q);}public function sessionizeMIS($dbg){	$dbo=PDBO;		require_once(SITE."functions/students.php");	require_once(SITE."functions/sessionize.php");	$db	=&	$this->db;	$ucid = $_SESSION['user']['ucid'];		/* 2 - settings */		sessionizeSettingsGis($db,$dbg);		$this->urooms($ucid);	sessionizeTablesMIS($db,$dbg);	sessionizeAccount($db);	sessionizeUserByUcid($db,$ucid);		/* 3 - etc */	unset($_SESSION['crid']);	unset($_SESSION['erid']);	}	/* fxn */   public function descriptions($dbg=PDBG){		$dbo=PDBO;		$q = "SELECT d.*,cty.name AS crstype 	      FROM {$dbg}.05_descriptions AS d			LEFT JOIN {$dbo}.`05_crstypes` AS cty ON d.crstype_id = cty.id		  ORDER BY d.id ";	$sth = $this->db->querysoc($q);	return $sth->fetchAll(); 				}	/* fxn */public function getDepartmentDetails($dept,$dbg=PDBG){	$dbo=PDBO;		$q = " SELECT * FROM {$dbo}.`05_departments` WHERE `id` = '$dept' LIMIT 1;  ";	$sth = $this->db->querysoc($q);	return $sth->fetch();}	/* fxn */public function getContacts($role_id=NULL,$fields=NULL,$order="c.name",$all=false,$limits=NULL,$dbg=PDBG){$dbo=PDBO;	$cond 	 = "";$cond 	.= (isset($role_id))? " AND u.role_id = $role_id ":NULL;$cond 	.= (!$all)? " AND c.is_active = 1 ":NULL;$fields  = (isset($fields))? ','.$fields:NULL;$limits  = (isset($limits))? " LIMIT $limits ":NULL;$q = "SELECT r.name AS role,u.id,c.name,c.code,u.account,		u.parent_id,u.role_id,u.privilege_id $fields	FROM {$dbo}.`00_contacts` AS u		LEFT JOIN {$dbo}.`00_contacts` AS c ON u.parent_id = c.id		LEFT JOIN {$dbo}.`00_roles` AS r ON u.role_id = r.id	WHERE 1 = 1 $cond	ORDER BY u.id ASC $limits; ";$sth = $this->db->querysoc($q);return $sth->fetchAll();}	/* fxn */ } 	/* Mi Model */